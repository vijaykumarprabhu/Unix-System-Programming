#include <signal.h>
#include <unistd.h>
#include <stdio.h>

static volatile sig_atomic_t sigflag; /* set nonzero by sig handler */
static sigset_t newmask, oldmask, zeromask;

void display(char *str);

int main()
{
	pid_t pid;
	if ((pid = fork()) < 0) 
	{
    err_sys("fork error");
	}
	else if (pid == 0) 
	{            
		/* child */
		/* child does whatever is necessary ... */
		TELL_PARENT(getppid());     /* tell parent we're done */
    	WAIT_PARENT();              /* and wait for parent */
		/* and the child continues on its way ... */
		exit(0);
	}

/* parent does whatever is necessary ... */
TELL_CHILD(pid);            /* tell child we're done */
WAIT_CHILD();               /* and wait for child */

/* and the parent continues on its way ... */

exit(0);
}

static void sig_usr(int signo)
{
sigflag = 1;
}

void TELL_WAIT(void)
{
	if (signal(SIGUSR1, sig_usr) == SIG_ERR)
		perror("signal(SIGUSR1) error");
	if (signal(SIGUSR2, sig_usr) == SIG_ERR)
		perror("signal(SIGUSR2) error");
	sigemptyset(&zeromask);
	sigemptyset(&newmask);
	sigaddset(&newmask, SIGUSR1);
	sigaddset(&newmask, SIGUSR2);
/*
* Block SIGUSR1 and SIGUSR2, and save current signal mask.
*/
	if (sigprocmask(SIG_BLOCK, &newmask, &oldmask) < 0)
		perror("SIG_BLOCK error");
}
TELL_PARENT(pid_t pid)
{
	kill(pid, SIGUSR2);
}

WAIT_PARENT(void)
{
	while (sigflag == 0)
		sigsuspend(&zeromask);
	sigflag = 0;
	//Reset signal mask to original value.

	if (sigprocmask(SIG_SETMASK, &oldmask, NULL) < 0)
		err_sys("SIG_SETMASK error");
}

TELL_CHILD(pid_t pid)
{
	kill(pid, SIGUSR1);
}

void
WAIT_CHILD(void)
{
	while (sigflag == 0)
	sigsuspend(&zeromask);
	sigflag = 0;
	//Reset signal mask to original value.
	if (sigprocmask(SIG_SETMASK, &oldmask, NULL) < 0)
		perror("SIG_SETMASK error");
}
